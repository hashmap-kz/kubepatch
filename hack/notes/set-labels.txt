
// v1
//func setNestedLabels(obj map[string]interface{}, path string, labels map[string]string, create bool) error {
//	parts := strings.Split(path, "/")
//	return walkPath(obj, parts, labels, create)
//}
//
//func walkPath(node interface{}, parts []string, labels map[string]string, create bool) error {
//	if len(parts) == 0 {
//		if m, ok := node.(map[string]interface{}); ok {
//			for k, v := range labels {
//				m[k] = v
//			}
//			return nil
//		}
//		return fmt.Errorf("expected map at leaf, got %T", node)
//	}
//
//	key := parts[0]
//	isList := strings.HasSuffix(key, "[]")
//	key = strings.TrimSuffix(key, "[]")
//
//	switch curr := node.(type) {
//	case map[string]interface{}:
//		child, ok := curr[key]
//		if !ok {
//			if !create {
//				return nil
//			}
//			if isList {
//				child = []interface{}{map[string]interface{}{}}
//			} else {
//				child = map[string]interface{}{}
//			}
//			curr[key] = child
//		}
//
//		if isList {
//			list, ok := child.([]interface{})
//			if !ok {
//				return fmt.Errorf("expected list at %q", key)
//			}
//			for _, item := range list {
//				if err := walkPath(item, parts[1:], labels, create); err != nil {
//					return err
//				}
//			}
//			return nil
//		}
//
//		return walkPath(child, parts[1:], labels, create)
//
//	default:
//		return fmt.Errorf("unexpected type at %q: %T", key, node)
//	}
//}



// v0
//func setNestedLabels(obj map[string]interface{}, path string, labels map[string]string, create bool) error {
//	segments := strings.Split(path, "/")
//	return setRecursive(obj, segments, labels, create)
//}
//
//func setRecursive(m map[string]interface{}, path []string, labels map[string]string, create bool) error {
//	if len(path) == 0 {
//		return nil
//	}
//
//	seg := path[0]
//
//	// Handle arrays: segment like "volumeClaimTemplates[]"
//	if strings.HasSuffix(seg, "[]") {
//		key := strings.TrimSuffix(seg, "[]")
//		raw, ok := m[key]
//		if !ok {
//			if !create {
//				return nil
//			}
//			// Create empty array if allowed
//			raw = []interface{}{}
//			m[key] = raw
//		}
//		arr, ok := raw.([]interface{})
//		if !ok {
//			return fmt.Errorf("expected array at %q", key)
//		}
//		for i := range arr {
//			item, ok := arr[i].(map[string]interface{})
//			if !ok {
//				continue
//			}
//			if err := setRecursive(item, path[1:], labels, create); err != nil {
//				return err
//			}
//		}
//		return nil
//	}
//
//	// Last segment â€” apply labels
//	if len(path) == 1 {
//		node, ok := m[seg].(map[string]interface{})
//		if !ok {
//			if !create {
//				return nil
//			}
//			node = map[string]interface{}{}
//			m[seg] = node
//		}
//		for k, v := range labels {
//			node[k] = v
//		}
//		return nil
//	}
//
//	// Intermediate map key
//	child, ok := m[seg].(map[string]interface{})
//	if !ok {
//		if !create {
//			return nil
//		}
//		child = map[string]interface{}{}
//		m[seg] = child
//	}
//	return setRecursive(child, path[1:], labels, create)
//}
